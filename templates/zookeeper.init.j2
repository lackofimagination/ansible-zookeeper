#!/bin/bash

# Licensed to the Apache Software Foundation (ASF) under one or more
# contributor license agreements.  See the NOTICE file distributed with
# this work for additional information regarding copyright ownership.
# The ASF licenses this file to You under the Apache License, Version 2.0
# (the "License"); you may not use this file except in compliance with
# the License.  You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# chkconfig: 2345 80 20
# description: Summary: ZooKeeper is a centralized service for maintaining configuration information, naming, providing distributed synchronization, and providing group services. All of these kinds of services are used in some form or another by distributed applications. Each time they are implemented there is a lot of work that goes into fixing the bugs and race conditions that are inevitable. Because of the difficulty of implementing these kinds of services, applications initially usually skimp on them ,which make them brittle in the presence of change and difficult to manage. Even when done correctly, different implementations of these services lead to management complexity when the applications are deployed.
# processname: java
# pidfile: /var/run/zookeeper/zookeeper-server.pid
### BEGIN INIT INFO
# Provides:          zookeeper-server
# Required-Start:    $network $local_fs
# Required-Stop:
# Should-Start:      $named
# Should-Stop:
# Default-Start:     2 3 4 5
# Default-Stop:      0 1 6
# Short-Description: ZooKeeper is a centralized service for maintaining configuration information, naming, providing distributed synchronization, and providing group services.
### END INIT INFO
set -e

. /lib/lsb/init-functions

NAME=zookeeper-server
PIDFILE={{ zookeeper_pid_dir }}/zookeeper-server.pid

ZOOKEEPERUSER={{ zookeeper_user }}
ZOOPIDFILE=${PIDFILE}
ZOOKEEPER_HOME={{ zookeeper_install_dir }}
ZOOKEEPER_CONF={{ zookeeper_conf_dir }}
ZOOCFGDIR={{ zookeeper_conf_dir }}
CLASSPATH=$CLASSPATH:$ZOOKEEPER_CONF:$ZOOKEEPER_HOME/*:$ZOOKEEPER_HOME/lib/*
ZOO_DATADIR={{ zookeeper_data_dir }}
ZOO_LOG_DIR={{ zookeeper_log_dir }}
ZOO_LOG4J_PROP=${ZOO_LOG4J_PROP:-INFO,ROLLINGFILE}
ZOO_DATADIR_AUTOCREATE_DISABLE=${ZOO_DATADIR_AUTOCREATE_DISABLE:-true}
ENV="env CLASSPATH=$CLASSPATH ZOOCFGDIR=$ZOOCFGDIR ZOOPIDFILE=$ZOOPIDFILE ZOO_LOG_DIR=$ZOO_LOG_DIR"
EXEC="$ZOOKEEPER_HOME/bin/zkServer.sh"

case "$1" in
  start)
    if [ -f $PIDFILE ]; then
      status_of_proc -p "$PIDFILE" $EXEC "$NAME"
    fi

    log_daemon_msg "Starting Zookeeper server..."
    if $ENV start-stop-daemon --start -q --oknodo -p "$PIDFILE" -c $ZOOKEEPERUSER --exec $EXEC -- "start"; then
      log_end_msg 0
    else
      log_end_msg 1
    fi
    ;;
  stop)
    if [ ! -f $PIDFILE ]; then
      log_daemon_msg "$PIDFILE does not exist, process is not running"
      log_end_msg 0
    else
      PID=$(cat "$PIDFILE")
      log_daemon_msg "Stopping..."
      $ENV su -s /bin/bash {{ zookeeper_user }} -c "$EXEC stop"
      while [ -x /proc/${PID} ]; do
        log_daemon_msg "Waiting for Zookeeper to shutdown..."
        sleep 1
      done

      log_daemon_msg "Zookeeper stopped"
      log_end_msg 0
    fi
    ;;
  restart|force-reload)
    $0 stop
    $0 start
    ;;
  status)
    status_of_proc -p "$PIDFILE" $EXEC "$NAME"
    ;;
  *)
    echo "Usage: /etc/init.d/$NAME {start|stop|restart|status|force-reload}" >&2
    exit 1
    ;;
esac
